<?php

namespace Alghobary\LaravelMacros\Macros;

use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Illuminate\Database\Query\Builder as QueryBuilder;
use Illuminate\Database\Eloquent\Builder as EloquentBuilder;

class BuilderMacros
{
    public static function register()
    {
        /**
         * Adds a 'getSql' method to both database query builder and eloquent query builder,
         * this method will return the sql code generated by the builder just like 'toSql' does,
         * but with the actual values instead of '?' placeholders 
         * 
         * 
         * - NOTE:
         * We need to re-define the macro for Eloquent Builder becuase for smoe reason 
         * the ForwardsCalls trait does not forward the call from eloquent to query builder
         */
        QueryBuilder::macro('getSql', function () {
            $bindings = collect($this->getBindings())
                ->map(fn ($val) => "'$val'")
                ->toArray();

            return Str::replaceArray('?', $bindings, $this->toSql());
        });

        EloquentBuilder::macro('getSql', function () {
            $bindings = collect($this->getBindings())
                ->map(fn ($val) => "'$val'")
                ->toArray();

            return Str::replaceArray('?', $bindings, $this->toSql());
        });


        /**
         * Adds a 'whereLike' method to both database query builder and eloquent query builder,
         * to search multiple columns using the database 'LIKE' operator
         * 
         * - NOTE:
         * No need to re-define the macro for Eloquent Builder becuase of the ForwardsCalls trait.
         */
        QueryBuilder::macro('whereLike', function ($attributes, string $searchTerm) {
            $attributes = Arr::wrap($attributes);

            return $this->where(function (QueryBuilder $q) use ($attributes, $searchTerm) {
                foreach ($attributes as $attribute) {
                    $q->orWhere($attribute, 'LIKE', "%{$searchTerm}%");
                }
            });
        });
    }
}
